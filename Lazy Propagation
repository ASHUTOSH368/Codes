#include <bits/stdc++.h>

// #include<ext/pb_ds/assoc_container.hpp>
// #include<ext/pb_ds/tree_policy.hpp>

using namespace std;

// using namespace std;
// using namespace __gnu_pbds;

#define int long long 
// #define ll long long
#define endl "\n"
#define pb push_back
#define poop pop_back
#define vil vector<long long int>
#define vii vector<int>
#define vip vector<pair<int,int>>
#define p_count __builtin_popcount
#define all(x) x.begin(),x.end()
#define L lower_bound
#define U upper_bound
#define F first
#define S second
#define mx_e(v) *max_element(all(v))
#define mn_e(v) *min_element(all(v))
#define rep(i,n) for(ll i=0;i<n;i++)
#define w(t) cin>>t; while(t--)
#define min3(a,b,c) min(a,min(b,c))
#define min4(a,b,c,d) min(a,min(b,min(c,d)))
//typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
#define inf 1e18



/*--------------------------Code----------------------------------------------------------------------------------------*/

// int lazy[10005];

class SGTree {

	vector<int> seg,lazy;
	public :
	SGTree(int n){
		seg.resize(4*n+1);
		lazy.resize(4*n+1);
	}
	public:
	void build(int ind,int low,int high,vii arr){
	if(low==high){
		seg[ind]=arr[low];
		return ;
	}
	int mid=low+(high-low)/2;
	build(2*ind+1,low,mid,arr);
	build(2*ind+2,mid+1,high,arr);
	seg[ind]=seg[2*ind+1]+seg[2*ind+2];
}

void rangeupdate(int ind,int low, int high,int l,int r,int val){
	if(lazy[ind]!=0){
		seg[ind]+=(high-low+1)*lazy[ind];
		if(low!=high){
			lazy[2*ind+1]+=lazy[ind];
			lazy[2*ind+2]+=lazy[ind];
		}
		lazy[ind]=0;
	}

	if(r<low || l>high){
		return;
	}

	if(low>=l and high<=r){
		seg[ind]+=(high-low+1)*val;
		if(low!=high){
			lazy[2*ind+1]+=val;
			lazy[2*ind+2]+=val;
		}
		return;
	}

	int mid=low+(high-low)/2;

	rangeupdate(2*ind+1,low,mid,l,r,val);
	rangeupdate(2*ind+2,mid+1,high,l,r,val);
	seg[ind]=seg[2*ind+1]+seg[2*ind+2];
}

int rangequery(int ind,int low,int high,int l,int r){
	if(lazy[ind]!=0){
		seg[ind]+=(high-low+1)*lazy[ind];
		if(low!=high){
			lazy[2*ind+1]+=lazy[ind];
			lazy[2*ind+2]+=lazy[ind];
		}
		lazy[ind]=0;
	}

	if(l>high || r<low){
		return 0;
	}

	if(l>=low and r<=high){
		return seg[ind];
	}

	int mid=low+(high-low)/2;

	return rangequery(2*ind+1,low,mid,l,r)
			+rangequery(2*ind+2,mid+1,high,l,r);
}
};


int32_t main(){
	int n;
	cin>>n;
	vii arr(n);
	for(int i=0;i<n;i++){
		cin>>arr[i];
	}

	SGTree seg(n);
	seg.build(0,0,n-1,arr);

	int q;
	cin>>q;
	while(q--){
		int type;
		cin>>type;
		if(type==1){
			int l,r;
			cin>>l>>r;
			cout<<seg.rangequery(0,0,n-1,l,r)<<endl;
		}
		else{
			int l,r,val;
			cin>>l>>r>>val;
			seg.rangeupdate(0,0,n-1,l,r,val);
		}
	}
}
