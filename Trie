#include <bits/stdc++.h>

// #include<ext/pb_ds/assoc_container.hpp>
// #include<ext/pb_ds/tree_policy.hpp>

using namespace std;

// using namespace std;
// using namespace __gnu_pbds;

#define int long long 
// #define ll long long
#define endl "\n"
#define pb push_back
#define poop pop_back
#define vil vector<long long int>
#define vii vector<int>
#define vip vector<pair<int,int>>
#define p_count __builtin_popcount
#define all(x) x.begin(),x.end()
#define L lower_bound
#define U upper_bound
#define F first
#define S second
#define mx_e(v) *max_element(all(v))
#define mn_e(v) *min_element(all(v))
#define rep(i,n) for(ll i=0;i<n;i++)
#define w(t) cin>>t; while(t--)
#define min3(a,b,c) min(a,min(b,c))
#define min4(a,b,c,d) min(a,min(b,min(c,d)))

//typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;
// nth element *A.find_by_order(n)
// Lower bound *A.lower_bound(n) *A.upper_bound(n)
// Erase *A.erase(n)
// No. of elements smaller than n-> A.order_of_key(n)


#define inf 1e18



/*--------------------------Code----------------------------------------------------------------------------------------*/


struct Trienode {
	char val;
	int count;
	int endshere;
	Trienode *child[26];
};

struct Trienode* getnode(int indx){
	struct Trienode * newnode=new Trienode;
	newnode->val='a'+indx;
	newnode->count=newnode->endshere=0;

	for(int i=0;i<26;i++){
		newnode->child[i]=NULL;
	}

	return newnode;
}

void Insert(string word,struct Trienode *root){
	cout<<"ASHUTOSH"<<endl;
	struct Trienode * temp=root;
	int index;
	for(int i=0;i<word.size();i++){
		index=word[i]-'a';

		if(temp->child[index]==NULL){
			temp->child[index]=getnode(index);
		}

		temp->child[index]->count+=1;
	}
	temp->endshere+=1;
}

bool Search(string word,struct Trienode *root){
	struct Trienode* temp=root;
	int index;
	for(int i=0;i<word.size();i++){
		index=word[i]-'a';
		if(temp->child[index]==NULL){
			return false;
		}
		temp=temp->child[index];
	}
	return temp->endshere>0;
}


int32_t main(){
	struct Trienode *root;  
	cout<<"Ashutosh singh"<<endl;
	string s="Ashutosh";
	// Insert(s,root);
	// Insert("Ashu");
	// Insert("Aastha");
	// Insert("Anil");
	Insert(s,root);
	cout<<"Ashutosh singh"<<endl;
	// if(Search("Ashutosh",root)){
	// 	cout<<"Available there"<<endl;
	// }
	// else{
	// 	cout<<"Not in the Dictionary"<<endl;
	// }
}
